<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/jee   
       http://www.springframework.org/schema/jee/spring-jee-3.0.xsd">
       
	<!-- 数据源
	<jee:jndi-lookup id="dataSource" jndi-name="jdbc/auth_jdbc" /> -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
 		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/hr"/>
		<property name="user" value="root"/>
 		<property name="password" value="root"/>
 		<!-- 
 		<property name="driverClass" value="${datasource.driverClass}"/>
 		<property name="jdbcUrl" value="${datasource.jdbcUrl}"/>
		<property name="user" value="${datasource.username}"/>
 		<property name="password" value="${datasource.password}"/>
 		 --> 
 	</bean>
	
	<!-- - - - - - - - sessionFactory - - - - - - - -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置
		<property name="configLocation" value="classpath:mybatis-config.xml"/>  -->
		<property name="typeAliasesPackage" value="com.hr.model" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:mybatis_mappers/*Mapper.xml</value>
			</list>
		</property>
		
		<!-- <property name="plugins">
			<array>
				<ref bean="paginationInterceptor" />
			</array>
		</property> -->
		<property name="configurationProperties">
			<props>
				<prop key="dialect">mysql</prop>
			</props>
		</property>
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!-- 扫描basePackage下的接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.hr.dao" />
	</bean>
	<!-- MyBatis end -->
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<!-- 通过声名式统一管理事务(service 包或子包下所有依Service结尾class的所有方法) -->
	<aop:config>
        <aop:advisor pointcut="execution(* com.hr..service..*Service.*(..))" advice-ref="txAdvice"/>  
    </aop:config>
    
     <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
		<!-- 事务的配置
			PROPAGATION_REQUIRED:如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。
			PROPAGATION_SUPPORTS:支持当前事务，如果当前没有事务，就以非事务方式执行。
			PROPAGATION_MANDATORY:使用当前的事务，如果当前没有事务，就抛出异常。
			PROPAGATION_REQUIRES_NEW:新建事务，如果当前存在事务，把当前事务挂起。
			PROPAGATION_NOT_SUPPORTED:以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
			PROPAGATION_NEVER:以非事务方式执行，如果当前存在事务，则抛出异常。
			PROPAGATION_NESTED:如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类 似的操作。 
			read-only “只读事务”仅仅是一个性能优化的推荐配置而已，并非强制要这样做不可
			-->
			<tx:method name="add*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="append*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="save*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="update*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="modify*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="edit*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="remove*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="repair" propagation="REQUIRED" read-only="false"/>
			<tx:method name="delAndRepair" propagation="REQUIRED" read-only="false"/>

			<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="load*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="search*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="datagrid*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="list*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="*" propagation="SUPPORTS" rollback-for="java.lang.Exception"/>
        </tx:attributes>  
    </tx:advice> 
</beans>